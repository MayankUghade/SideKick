generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model User {
  id              Int      @id @default(autoincrement())
  kindeId         String   @unique
  email           String   @unique
  firstName       String
  lastName        String
  userImage       String
  proflieComplete Boolean  @default(false)
  profile         Profile?
}

model Profile {
  id               String     @id @default(cuid())
  userEmail        String     @unique
  profileImage     String
  userName         String
  description      String
  role             String
  githubProfile    String
  twitterProfile   String
  linkedinProfile  String
  instagramProfile String
  posts            Post[]
  comments         Comment[]
  ratings          Rating[]
  bookmark         Bookmark[]

  user User @relation(fields: [userEmail], references: [email], onDelete: Cascade)
}

model Post {
  id            String     @id @default(cuid())
  email         String
  projectTitle  String
  description   String
  tags          String
  githubUrl     String
  projectImages String[]
  comments      Comment[]
  ratings       Rating[]
  bookmark      Bookmark[]

  profile Profile @relation(fields: [email], references: [userEmail], onDelete: Cascade) // Relation to Profile model
}

model Comment {
  id        String   @id @default(cuid())
  postId    String
  userEmail String
  message   String
  createdAt DateTime @default(now())

  post    Post    @relation(fields: [postId], references: [id], onDelete: Cascade)
  profile Profile @relation(fields: [userEmail], references: [userEmail], onDelete: Cascade)
}

model Rating {
  id        String   @id @default(cuid())
  postId    String
  userEmail String
  rating    Int
  createdAt DateTime @default(now())

  post    Post    @relation(fields: [postId], references: [id], onDelete: Cascade)
  profile Profile @relation(fields: [userEmail], references: [userEmail], onDelete: Cascade)
}

model Bookmark {
  id        String   @id @default(cuid())
  postId    String
  userEmail String
  createdAt DateTime @default(now())

  post    Post    @relation(fields: [postId], references: [id], onDelete: Cascade)
  profile Profile @relation(fields: [userEmail], references: [userEmail], onDelete: Cascade)
}
